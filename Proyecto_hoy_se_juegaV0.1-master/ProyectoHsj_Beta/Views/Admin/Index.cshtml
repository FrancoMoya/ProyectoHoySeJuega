@{
    Layout = "~/Views/Shared/Layout_admin.cshtml";

    ViewData["Title"] = "Panel de Administración - Reservas";
}

<style>
    /* General */
    body {
        background-color: #f8f9fa;
        font-family: 'Roboto', sans-serif;
    }

    h2 {
        color: #343a40;
        text-align: center;
        margin-top: 20px;
        margin-bottom: 30px;
    }

    #calendar {
        max-width: 90%;
        margin: 0 auto;
        border: 1px solid #dee2e6;
        border-radius: 10px;
        overflow: hidden;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
        /* Cambia el cursor a una mano (puntero de enlace) sobre las fechas del calendario */
        #calendar .fc-day {
            cursor: pointer;
        }


    /* Modal */
    .modal-content {
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        background-color: #343a40;
        color: white;
    }

    .modal-body {
        color: #495057;
    }

    .list-group-item {
        font-size: 1.17rem;
    }

    /* Estilos específicos para la vista de reservas dentro del modal */
    #reservationDetailModal .list-group-item {
        background-color: #ffffff; /* Color de fondo blanco */
        padding: 20px; /* Aumenta el padding para dar más espacio a los contenidos */
        border: 1px solid #dee2e6; /* Borde gris claro */
        border-radius: 8px; /* Bordes redondeados */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Sombra sutil para dar profundidad */
        margin-bottom: 10px; /* Espacio entre elementos */
    }

        #reservationDetailModal .list-group-item p {
            margin: 0; /* Asegura que no haya márgenes adicionales dentro de los párrafos */
        }

        /* Hover sobre los elementos de la lista */
        #reservationDetailModal .list-group-item:hover {
            background-color: #f8f9fa; /* Resalta el fondo cuando el cursor pasa por encima */
        }

        /* Estilo para los botones dentro de cada item */
        #reservationDetailModal .list-group-item .btn {
            border-radius: 8px; /* Bordes redondeados en los botones */
        }

    .fc-toolbar-title {
        text-transform: uppercase; /* Pone en mayúsculas el nombre del mes */
    }
        /* Diseño Responsivo */
    @@media (max-width: 768px) {
    #calendar {
        max-width: 100%;
        margin: 10px auto;
        /* Asegura que el calendario ocupe más espacio verticalmente */
        min-height: 80vh; /* Ajusta el valor según lo que necesites */
        height: auto; /* Si no quieres que se ajuste a un valor fijo, puedes usar auto */
    }

    .fc-toolbar {
        flex-direction: column;
    }

    .fc-toolbar-title {
        font-size: 1.2em;
        margin-bottom: 10px;
    }

    .modal-dialog {
        margin: 10px;
    }

    .modal-body p {
        font-size: 0.9em;
    }
}

    
</style>

<h2>Reservas creadas por Clientes</h2>

<!-- Contenedor del Calendario -->
<div id="calendar"></div>

<!-- Modal para Detalles de la Reserva -->
<div class="modal fade" id="reservationDetailModal" tabindex="-1" aria-labelledby="reservationDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reservationDetailModalLabel">Detalles de la Reserva</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Contenido del modal generado dinámicamente -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<!-- Scripts de FullCalendar y Bootstrap -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/main.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>

<!-- Scripts -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        let calendarEl = document.getElementById('calendar');
        let calendar = new FullCalendar.Calendar(calendarEl, {
            locale: 'es',
            initialView: window.innerWidth <= 768 ? 'timeGridWeek' : 'dayGridMonth',
            buttonText: { today: 'Hoy' },
            events: function (fetchInfo, successCallback, failureCallback) {
                fetch('/Admin/GetReservas')
                    .then(response => response.json())
                    .then(events => {
                        console.log(events);  // Verifica los eventos en la consola

                        // Filtra los eventos para mostrar solo los confirmados
                        const confirmedEvents = events.filter(event => event.estado === 'CONFIRMADA');
                        successCallback(confirmedEvents);
                    })
                    .catch(error => {
                        console.error('Error al obtener los eventos:', error);
                        failureCallback(error);
                    });
            },

            buttonText: {
                today: 'Hoy',
                month: 'Mes',
                week: 'Semana',
                day: 'Día',
                list: 'Lista' // Esto es para la vista de lista si la estás utilizando
            },

            // Configura el formato del título del mes en mayúsculas
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            titleFormat: {
                month: 'long', // Formato largo para el mes (ej. "enero", "febrero", etc.)
                year: 'numeric'
            },
            eventTimeFormat: {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false // Si prefieres usar el formato de 24 horas
            },
            // Configura las horas visibles en las vistas 'timeGrid'
            slotMinTime: "08:00:00", // Hora de inicio visible (ejemplo: 08:00 AM)
            slotMaxTime: "20:00:00", // Hora de fin visible (ejemplo: 08:00 PM)
            slotLabelInterval: '01:00', // Intervalo de las horas (cada 1 hora)
            slotDuration: '00:30:00', // Duración de cada franja horaria (30 minutos)
            allDaySlot: false, // Ocultar el slot de "Todo el día"

            // Mostrar las horas en el lado izquierdo
            slotEventOverlap: false, // Evitar que los eventos se superpongan

            // Este evento cubre clics en toda la celda
            dateClick: function (info) {
                const reservasEnFecha = calendar.getEvents().filter(
                    r => new Date(r.start).toDateString() === info.date.toDateString()
                );

                let reservasHtml = '<ul class="list-group">';
                // Formateamos la fecha que se tocó a un formato legible (por ejemplo: "Martes, 17 de Octubre de 2024")
                const fechaFormateada = info.date.toLocaleDateString('es-ES', {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'long',
                    year: 'numeric'
                });

                if (reservasEnFecha.length > 0) {
                    reservasEnFecha.forEach(reserva => {
                        const showCancelButton = reserva.extendedProps.estado === "CONFIRMADA";
                        reservasHtml += `
                                <li class="list-group-item">
                                    <p><strong>ID:</strong> ${reserva.extendedProps.idReserva}</p>
                                    <p><strong>Usuario:</strong> ${reserva.extendedProps.usuarioNombre}</p>
                                    <p><strong>Teléfono:</strong> ${reserva.extendedProps.usuarioTelefono}</p>
                                    <p><strong>Estado:</strong> ${reserva.extendedProps.estado}</p>
                                    <p><strong>Hora:</strong> ${new Date(reserva.start).toLocaleTimeString()}</p>
                                    <div class="d-flex justify-content-end">
                                        ${showCancelButton ? `<button class="btn btn-warning btn-sm me-2 cancelar-reserva-btn" data-id="${reserva.extendedProps.idReserva}">Cancelar</button>` : ""}
                                        <button class="btn btn-danger btn-sm eliminar-reserva-btn" data-id="${reserva.extendedProps.idReserva}">Eliminar</button>
                                    </div>
                                </li>
                            `;
                    });
                } else {
                    reservasHtml = `<p>No hay reservas para la fecha: <strong>${fechaFormateada}</strong>.</p>`;
                }

                reservasHtml += '</ul>';
                document.querySelector('#reservationDetailModal .modal-body').innerHTML = reservasHtml;

                const modal = new bootstrap.Modal(document.getElementById('reservationDetailModal'));
                modal.show();

                // Funcionalidad para cancelar reserva
                document.querySelectorAll('.cancelar-reserva-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        cancelarReserva(this.dataset.id);
                    });
                });

                // Funcionalidad para eliminar reserva
                document.querySelectorAll('.eliminar-reserva-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        eliminarReserva(this.dataset.id);
                    });
                });
            },

            eventClick: function (info) {
                const reserva = info.event.extendedProps;
                let reservasHtml = '<ul class="list-group">';

                reservasHtml += `
                        <li class="list-group-item">
                            <p><strong>ID:</strong> ${reserva.idReserva}</p>
                            <p><strong>Usuario:</strong> ${reserva.usuarioNombre}</p>
                            <p><strong>Teléfono:</strong> ${reserva.usuarioTelefono}</p>
                            <p><strong>Estado:</strong> ${reserva.estado}</p>
                            <p><strong>Hora:</strong> ${new Date(info.event.start).toLocaleTimeString()}</p>
                            <div class="d-flex justify-content-end">
                                ${reserva.estado === "CONFIRMADA" ? `<button class="btn btn-warning btn-sm me-2 cancelar-reserva-btn" data-id="${reserva.idReserva}">Cancelar</button>` : ""}
                                <button class="btn btn-danger btn-sm eliminar-reserva-btn" data-id="${reserva.idReserva}">Eliminar</button>
                            </div>
                        </li>
                    `;

                reservasHtml += '</ul>';
                document.querySelector('#reservationDetailModal .modal-body').innerHTML = reservasHtml;

                const modal = new bootstrap.Modal(document.getElementById('reservationDetailModal'));
                modal.show();

                document.querySelectorAll('.cancelar-reserva-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        cancelarReserva(this.dataset.id);
                    });
                });

                document.querySelectorAll('.eliminar-reserva-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        eliminarReserva(this.dataset.id);
                    });
                });
            }
        });

        calendar.render();

        function cancelarReserva(reservaId) {
            if (confirm('¿Estás seguro de cancelar esta reserva?')) {
                fetch(`/Admin/CancelarReserva/${reservaId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                    .then(response => response.ok ? location.reload() : alert('Error al cancelar reserva'))
                    .catch(console.error);
            }
        }

        function eliminarReserva(reservaId) {
            if (confirm('¿Estás seguro de eliminar esta reserva?')) {
                fetch(`/Admin/EliminarReserva/${reservaId}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                })
                    .then(response => response.ok ? location.reload() : alert('Error al eliminar reserva'))
                    .catch(console.error);
            }
        }
    });
</script>



