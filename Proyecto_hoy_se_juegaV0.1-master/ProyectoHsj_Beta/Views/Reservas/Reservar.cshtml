@{
    ViewData["Title"] = "Crear Reserva";
    Layout = null;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="icon" href="~/css/img/hoysejuegaa.png" type="image/png">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Estilo del contenedor de mensajes */
        #message-container {
            margin-top: 10px;
            display: none;
            border-radius: 5px;
            padding: 10px;
        }

            #message-container.success {
                background-color: #d4edda;
                color: #155724;
            }

            #message-container.error {
                background-color: #f8d7da;
                color: #721c24;
            }

            #message-container.info {
                background-color: #d1ecf1;
                color: #0c5460;
            }

    /* Fondo general de la página */
    .bodyReserva {
        font-family: 'Arial', sans-serif;
        background-color: #1d2126; /* Fondo oscuro para toda la página */
        color: #e0e0e0; /* Color de texto claro */
    }

    /* Contenedor del calendario */
    .calendar-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        border: 1px solid #444; /* Borde oscuro */
        border-radius: 10px;
        padding: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        background-color: #3b4147; /* Fondo más oscuro del contenedor */
        margin-top: 5px;
    }

    /* Estilo de los días del calendario */
    .calendar-day {
        width: 40px;
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 50%;
        background-color: #4f5358; /* Fondo oscuro de los días */
        margin: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        color: #e0e0e0; /* Texto claro */
    }

    .calendar-day.selected {
        background-color: #007bff; /* Color de fondo al seleccionar el día */
        color: white; /* Texto blanco */
    }

    .calendar-day:hover {
        background-color: #616668; /* Color de hover */
    }

    .calendar-day.disabled {
        background-color: #343a40; /* Fondo oscuro para días deshabilitados */
        cursor: not-allowed;
        color: #999; /* Color claro para los días deshabilitados */
    }

    .calendar-header {
        text-align: center;
        font-weight: bold;
        margin-top: 10px;
        color: #e0e0e0; /* Color del texto de la cabecera */
    }

    .week-navigation {
        display: flex;
        justify-content: space-between;
        width: 100%;
        margin-bottom: 15px;
        font-size: 1.2em;
        color: #e0e0e0; /* Color del texto de la navegación */
    }

    .calendar-row {
        display: flex;
        justify-content: space-evenly;
        width: 100%;
    }

    .calendar-day-label {
        font-weight: bold;
        text-align: center;
        width: 40px;
        font-size: 1em;
        color: #e0e0e0; /* Color del texto de los días */
    }

    #month-name {
        font-size: 1.5em;
        font-weight: bold;
        margin: 0;
        color: #007bff; /* Color del nombre del mes */
        text-align: center;
        flex-grow: 1;
        margin-bottom: 10px;
    }

    #calendar {
        margin-top: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #schedule h5 {
        color: #007bff; /* Color de los títulos de los horarios */
        font-size: 1.2em;
    }

    #schedule-list {
        font-size: 1.1em;
    }

    .schedule-item {
        cursor: pointer;
        padding: 10px;
        margin: 5px;
        border: 1px solid #444; /* Borde oscuro */
        border-radius: 5px;
        text-align: center;
        transition: background-color 0.3s ease;
        background-color: #4f5358; /* Fondo oscuro de los horarios */
        color: #e0e0e0; /* Color de texto claro */
    }

    .schedule-item:hover {
        background-color: #616668; /* Fondo al pasar el ratón */
    }

    .selected-schedule {
        background-color: #007bff; /* Color de fondo cuando el horario está seleccionado */
        color: white; /* Texto blanco */
    }
    /* Capa que oscurece el fondo */
    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Oscurecer el fondo */
        display: none; /* Ocultarlo por defecto */
        z-index: 9998;
    }

    /* Estilo del mensaje */
    .message-container {
        position: fixed;
        top: 40%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        background-color: rgba(135, 206, 250, 0.8); /* Celeste */
        color: white;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        font-size: 18px;
        display: none; /* Oculto por defecto */
    }

    .spinner {
        margin: 10px auto;
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }


    @@media (max-width: 767px) {
        .calendar-day-label {
            font-size: 0.8em;
            width: 35px;
        }

        .calendar-day {
            width: 35px;
            height: 35px;
        }

        .calendar-container {
            padding: 5px; /* Ajustado para móviles */
        }

        .calendar-header {
            font-size: 0.9em;
        }

        #month-name {
            font-size: 1.2em;
        }

        .week-navigation {
            font-size: 1em;
        }

        #text-mp {
            font-size: 0.9em !important;
        }
        .calendar-day.selected {
            background-color: #007bff;  /* Asegúrate de que este estilo esté bien definido */
        }

        .schedule-item.selected-schedule {
            background-color: #007bff;
        }
        .message-container {
        width: 90%; /* En pantallas pequeñas, el mensaje ocupa el 90% del ancho */
        font-size: 16px; /* Puedes reducir el tamaño del texto para que se vea mejor */
        padding: 15px; /* Ajusta el padding para pantallas pequeñas */
        top: 24%;
        left: 50%;
    }
    }
</style>

</head>
<body class="bodyReserva">
    <div class="container my-4" style="margin-top: 0.5rem !important;">
        <div id="overlay" class="overlay"></div>
        <div id="message-container" class="message-container"></div>
        <div class="d-flex justify-content-between align-items-center mb-4">
            <!-- Botón "Home" (izquierda) -->
            <a href="/" class="btn btn-secondary">
                <i class="bi bi-house-door"></i> Volver a inicio
            </a>
            <div class="info-container d-flex flex-column align-items-center justify-content-center ml-4">

                <img src="~/css/img/mercadopagos.png" alt="Logo Mercado Pago" class="img-fluid mb-1" style="max-width: 150px;">
                <p class="text-center" id="text-mp" style="font-size: 1.1em; font-weight: bold; margin-bottom: 0rem;">
                    ¡Se puede pagar con Mercado Pago!<br>
                    (Monto del valor de reserva: $@ViewData["monto"])
                </p>

            </div>
            <!-- Botón "Mis Reservas" (derecha) -->
            <a href="/Reservas/MisReservas" class="btn btn-primary">
                Mis Reservas <i class="bi bi-calendar-check"></i>
            </a>
        </div>
        <div class="calendar-container">
            <!-- Month Name -->
            <div id="month-name"></div> <!-- El nombre del mes irá aquí -->
            <!-- Top navigation with week navigation -->
            <div class="d-flex justify-content-between align-items-center w-100">
                <button class="btn btn-outline-primary" id="prev-week">←</button>
                <div class="calendar-header" id="current-week">Semana actual</div>
                <button class="btn btn-outline-primary" id="next-week">→</button>
            </div>

            <!-- Calendar Grid -->
            <div id="calendar">
                <!-- Aquí se llenarán los días dinámicamente -->
            </div>

            <!-- Lista de horarios -->
            <div id="schedule" class="mt-4">
                <h5 id="schedule-message">Seleccione una fecha</h5>
                <ul id="schedule-list" class="list-group">
                    <!-- Los horarios se mostrarán aquí -->
                </ul>
            </div>
        </div>
    </div>

    <!-- Modal para confirmar reserva -->
    <div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="background-color: #15171a;">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmModalLabel">CONFIRMAR SELECCIÓN</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de confirmar la reserva para el horario seleccionado?</p>
                    <p id="modal-schedule-details" style="margin-bottom: 0.3rem !important"></p>
                    <small style="margin-bottom: 0.1rem !important">(Recuerde mantener su número actualizado)</small>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="confirm-reservation">Confirmar</button>
                </div>
            </div>
        </div>
    </div>

    <form id="reservation-form" method="post">
        @Html.AntiForgeryToken()
    </form>


    <!-- Bootstrap JS, Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/&#64;popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const messageContainer = document.getElementById('message-container');
            const daysOfWeek = ['Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb', 'Dom'];
            const monthsOfYear = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
            let currentDate = new Date();  // Fecha inicial, que será el lunes de la semana actual
            let selectedDate = null;
            let selectedSlot = null;

            // Función para formatear la fecha en formato YYYY-MM-DD (sin incluir hora)
            function formatDate(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            function formatDateVerbose(date) {
                const days = ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"];
                const months = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];
                const day = days[date.getDay()];
                const month = months[date.getMonth()];
                const dayOfMonth = date.getDate();
                const year = date.getFullYear();
                return `${day}, ${dayOfMonth} de ${month} de ${year}`;
            }


            // Obtener el lunes de la semana de una fecha dada
            function getMonday(date) {
                const day = date.getDay(),
                    diff = date.getDate() - day + (day == 0 ? -6 : 1); // Ajuste para que el lunes sea el inicio de la semana
                return new Date(date.setDate(diff));
            }

            // Renderizar el calendario para la semana de inicio
            function renderCalendar(weekStartDate) {
                const calendarElement = document.getElementById('calendar');
                calendarElement.innerHTML = '';  // Limpiar el contenido anterior

                const startDate = getMonday(new Date(weekStartDate));  // Obtener lunes de la semana actual
                const currentWeek = document.getElementById('current-week');
                currentWeek.textContent = `Semana del ${startDate.toLocaleDateString()}`;

                const monthName = monthsOfYear[startDate.getMonth()];
                document.getElementById('month-name').textContent = monthName;

                // Crear la fila para los nombres de los días
                const daysRow = document.createElement('div');
                daysRow.classList.add('calendar-row');
                daysOfWeek.forEach(day => {
                    const dayLabel = document.createElement('div');
                    dayLabel.classList.add('calendar-day-label');
                    dayLabel.textContent = day;
                    daysRow.appendChild(dayLabel);
                });
                calendarElement.appendChild(daysRow);

                // Crear la fila para los números de los días
                const daysRowContent = document.createElement('div');
                daysRowContent.classList.add('calendar-row');
                for (let i = 0; i < 7; i++) {
                    const day = new Date(startDate);
                    day.setDate(startDate.getDate() + i);

                    const dayString = formatDate(day);
                    const isSelected = selectedDate && formatDate(selectedDate) === dayString;
                    const isToday = formatDate(new Date()) === dayString;
                    const isDisabled = day < new Date().setHours(0, 0, 0, 0) || day > new Date().setDate(new Date().getDate() + 14);
                    //Desactivar los dias anteriores y mayores a 14 dias

                    const dayElement = document.createElement('div');
                    dayElement.classList.add('calendar-day');

                    if (isSelected) {
                        dayElement.classList.add('selected');
                    }

                    if (isDisabled && !isToday) {
                        dayElement.classList.add('disabled');
                    } else {
                        dayElement.addEventListener('click', () => selectDay(day));
                    }

                    // Preseleccionar la fecha actual solo si no hay una fecha seleccionada
                    if (isToday && !selectedDate) {
                        dayElement.classList.add('selected');
                        selectedDate = day;  // Asegurarse de que se seleccione solo una vez
                    }

                    dayElement.textContent = day.getDate();
                    dayElement.setAttribute('data-date', dayString);

                    daysRowContent.appendChild(dayElement);
                }
                calendarElement.appendChild(daysRowContent);
            }

            // Seleccionar un día y mostrar los horarios
            function selectDay(day) {
                selectedDate = day;
                const selectedDayElement = document.querySelector('.calendar-day.selected');
                if (selectedDayElement) {
                    selectedDayElement.classList.remove('selected');
                }

                const clickedDayElement = document.querySelector(`[data-date="${formatDate(day)}"]`);
                clickedDayElement.classList.add('selected');

                fetchAvailableTimes(formatDate(day));  // Mostrar los horarios del día seleccionado
                document.getElementById('schedule-message').textContent = "Horarios disponibles:";
            }

            // Función para obtener los horarios disponibles
            function fetchAvailableTimes(day) {
                fetch(`/Reservas/GetAvailableTimeSlots?fecha=${day}`)
                    .then(response => response.json())
                    .then(data => {
                        const scheduleList = document.getElementById('schedule-list');
                        scheduleList.innerHTML = '';
                        if (data.length === 0) {
                            scheduleList.innerHTML = '<li class="list-group-item">No hay horarios disponibles</li>';
                        } else {
                            data.forEach(slot => {
                                const listItem = document.createElement('li');
                                listItem.classList.add('schedule-item');
                                listItem.textContent = `${slot.horaInicio} - ${slot.horaFin}`;
                                listItem.setAttribute('data-id', slot.idHorarioDisponible);  // Guardar el ID del horario
                                listItem.addEventListener('click', () => selectSlot(slot.idHorarioDisponible));  // Evento para seleccionar el horario
                                scheduleList.appendChild(listItem);
                            });
                        }
                    })
                    .catch(error => alert('Error al obtener horarios: ' + error.message));
            }

            // Seleccionar un horario
            function selectSlot(id) {
                selectedSlot = id;  // Guardar el ID del horario seleccionado

                const formattedDate = formatDateVerbose(selectedDate);  // Formatear la fecha seleccionada
                const slotDetails = document.querySelector(`[data-id="${id}"]`).textContent;  // Obtener los detalles del horario


                document.querySelectorAll('#schedule-list .schedule-item').forEach(item => {
                    item.classList.remove('selected-schedule');  // Desmarcar todos los horarios
                });

                const selectedItem = document.querySelector(`[data-id="${id}"]`);
                selectedItem.classList.add('selected-schedule');  // Marcar el horario seleccionado

                // Actualizar los detalles del modal con la fecha y el horario
                document.getElementById('modal-schedule-details').innerHTML = `
                        <strong>Fecha:</strong> ${formattedDate} <br>
                                <strong>Horario:</strong> ${slotDetails}hs
                    `;

                // Mostrar el modal
                const myModal = new bootstrap.Modal(document.getElementById('confirmModal'));
                myModal.show();
            }

            // Confirmar selección con solo el ID del horario en el cuerpo
            function confirmSelection() {
                console.log("Confirmar selección: ", selectedSlot);
                if (selectedSlot) {
                    fetch('/Reservas/ReservaCreate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token  // Agregar el token a las cabeceras
                        },
                        body: JSON.stringify({
                            IdHorarioDisponible: selectedSlot  // Solo el ID del horario
                        })
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Error en la respuesta del servidor: ' + response.statusText);
                            }
                            return response.json();
                            
                        })
                        .then(data => {
                            if (data.success) {
                                showMessage('success', data.message, true); //alert('Selección confirmada: ' + data.message);
                                // Deshabilitar la interacción con la página (mostrar overlay)
                                document.body.style.pointerEvents = 'none'; // Deshabilita todos los clics en la página
                                setTimeout(() => {
                                    // Redirigir a la vista ConfirmarReserva con el idReserva
                                    const reservaId = data.idReserva; // Suponiendo que la respuesta contiene el ID de la reserva
                                    window.location.href = `/Pagoes/Index?reservaId=${reservaId}`;
                                }, 670);
                            } else {
                                document.body.style.pointerEvents = 'auto';
                                showMessage('error', data.message); //alert('Error: ' + data.message);
                                setTimeout(() => {
                                    hideMessage();
                                 

                                }, 2000);
                            }
                        })
                        .catch(error => {
                            alert('Error al confirmar la selección: ' + error.message); //Cuando no inicio sesion da un error de token
                        });

                }
            }

            //MODAL
            document.getElementById('confirm-reservation').addEventListener('click', function () {
                confirmSelection();  // Confirmar la selección desde el modal
                const myModal = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
                myModal.hide();  // Cerrar el modal
            });

            // Función para cambiar la semana (anterior o siguiente)
            function changeWeek(direction) {
                const currentStartDate = new Date(currentDate);
                currentStartDate.setDate(currentStartDate.getDate() + direction * 7);  // Mover una semana hacia adelante o atrás
                currentDate = currentStartDate;
                renderCalendar(currentDate);
            }

            function showMessage(type, message, showSpinner = false) {
                const messageContainer = document.getElementById('message-container');
                const overlay = document.getElementById('overlay');

                // Mostrar el overlay y el mensaje
                overlay.style.display = 'block';
                messageContainer.style.display = 'block';
                messageContainer.innerHTML = `<p>${message}</p>`;

                if (showSpinner) {
                    // Agregar spinner si showSpinner es true
                    const spinner = document.createElement('div');
                    spinner.className = 'spinner';
                    messageContainer.appendChild(spinner);
                }

                // Cambiar colores según el tipo de mensaje
                if (type === 'success') {
                    messageContainer.style.backgroundColor = 'rgba(6, 35, 150, 0.8)'; // Celeste
                } else if (type === 'error') {
                    messageContainer.style.backgroundColor = 'rgba(255, 0, 0, 0.8)'; // Rojo
                }
            }

            function hideMessage() {
                const messageContainer = document.getElementById('message-container');
                const overlay = document.getElementById('overlay');

                messageContainer.style.display = 'none';
                overlay.style.display = 'none';
            }


            // Eventos de las flechas de navegación
            document.getElementById('prev-week').addEventListener('click', () => changeWeek(-1));  // Semana anterior
            document.getElementById('next-week').addEventListener('click', () => changeWeek(1));   // Semana siguiente

            // Inicializar el calendario y los eventos
            renderCalendar(currentDate);
        });
    </script>
</body>
</html>