@using System.Security.Claims
@model List<ProyectoHsj_Beta.Models.Reserva>

@{
    ViewData["Title"] = "Mis Reservas";
}

<h2>@ViewData["Title"]</h2>

<!-- Contenedor del Calendario -->
<div id="calendar"></div>

<!-- Estilo para el fondo blanco del calendario -->
<style>
    #calendar {
        background-color: white;
        padding: 20px;
    }
</style>

<!-- Scripts necesarios para FullCalendar -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/main.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>

<!-- Scripts de Bootstrap -->
<script src="https://cdn.jsdelivr.net/npm/popperjs/core@2.11.6/dist/umd/popper.min.js"></script>

<!-- Modal para seleccionar horario -->
<div class="modal fade" id="selectTimeModal" tabindex="-1" aria-labelledby="selectTimeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="selectTimeModalLabel">Selecciona un horario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <select id="availableTimeSlots" class="form-select" required>
                    <option value="">Seleccione un horario</option>
                    <!-- Opciones de horarios se llenarán aquí -->
                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button id="confirmReservation" type="button" class="btn btn-primary">Confirmar Reserva</button>
            </div>
        </div>
    </div>
</div>

<script>
    let selectedDate = "";

    // Función para convertir la hora a formato 12 horas con AM/PM
    function formatTimeTo12Hour(hour24) {
        const [hour, minute] = hour24.split(':');
        let hour12 = (hour % 12) || 12; // Convierte la hora a formato de 12 horas
        const ampm = hour >= 12 ? 'PM' : 'AM';
        return `${hour12}:${minute} ${ampm}`;
    }

    document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            locale: 'es', // Establece el calendario en español
            validRange: {
                start: new Date() // Bloquea todas las fechas anteriores a hoy
            },
            selectable: true,
            events: '/Reservas/GetReservas',

            // Mostrar modal de selección de horario al seleccionar una fecha
            select: function (info) {
                $('#selectTimeModal').modal('show');
                selectedDate = info.startStr;
                console.log("La fecha seleccionada es: " + selectedDate);

                // Obtener horarios disponibles para la fecha seleccionada
                fetch(`/Reservas/GetAvailableTimeSlots?fecha=${selectedDate}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log("Datos recibidos de horarios disponibles:", data);
                        const timeSlotSelect = document.getElementById('availableTimeSlots');
                        timeSlotSelect.innerHTML = '<option value="">Seleccione un horario</option>';

                        if (data.length === 0) {
                            timeSlotSelect.innerHTML = '<option value="">No hay horarios disponibles</option>';
                        }

                        data.forEach(slot => {
                            const option = document.createElement('option');
                            // Usar el ID y la hora de inicio en `value` y el rango horario en `textContent`
                            const startTimeFormatted = formatTimeTo12Hour(slot.horaInicio); // Formatear la hora de inicio
                            const endTimeFormatted = formatTimeTo12Hour(slot.horaFin);     // Formatear la hora de fin
                            option.value = `${slot.idHorarioDisponible},${slot.horaInicio}`;
                            option.textContent = `${startTimeFormatted} - ${endTimeFormatted}`;
                            timeSlotSelect.appendChild(option);
                        });
                    })
                    .catch(error => alert('Error al obtener horarios: ' + error.message));
            },

            eventClick: function (info) {
                const eventId = info.event.id;
                const estado = info.event.extendedProps.estado;
                const creadorId = info.event.extendedProps.creadorId;
                console.log("El creador : " + creadorId)
                const userId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';
                console.log("Usuario auntenticado: " + userId)
                const esAdmin = '@User.IsInRole("Admin")' === 'True';
                console.log(`Evento seleccionado: ID = ${eventId}, Estado = ${estado}`);
                let buttons = ``;

                // Asegúrate de que la comparación sea correcta, convirtiendo ambos valores a enteros si es necesario
                if (estado === "PENDIENTE" && (parseInt(userId) === parseInt(creadorId))) {
                    buttons += `<button class="btn btn-warning me-2" onclick="cancelarReserva(${eventId})">Cancelar</button>`;
                }

                if (estado === "CANCELADA") {
                    buttons += `<button class="btn btn-danger" onclick="eliminarReserva(${eventId})">Eliminar</button>`;
                }

                const modalContent = `
                            <div class="modal fade" id="reservationActionModal" tabindex="-1">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Acciones para la Reserva</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                        </div>
                                        <div class="modal-body">
                                            <p>Estado: ${estado}</p>
                                        </div>
                                        <div class="modal-footer">
                                            ${buttons}
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                                        </div>
                                    </div>
                                </div>
                            </div>`;
                const existingModal = document.getElementById('reservationActionModal');
                if (existingModal) {
                    existingModal.remove();
                }

                document.body.insertAdjacentHTML('beforeend', modalContent);
                const modal = new bootstrap.Modal(document.getElementById('reservationActionModal'));
                modal.show();
            }
        });

        calendar.render();

        // Confirmar reserva al hacer clic en el botón
        document.getElementById('confirmReservation').addEventListener('click', function () {
            const selectedTime = document.getElementById('availableTimeSlots').value;

            if (selectedTime) {
                const [idHorarioDisponible, startTime] = selectedTime.split(',');  // Extraer ID y hora de inicio
                const fullDateTime = `${selectedDate}T${startTime}`;  // Combina la fecha seleccionada con la hora de inicio

                const reserva = { IdHorarioDisponible: idHorarioDisponible, Fecha: fullDateTime };

                fetch('/Reservas/Create', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(reserva)
                })
                    .then(response => response.json()) // Obtener la respuesta como JSON
                    .then(data => {
                        console.log("ID de Reserva:", data.idReserva);
                        
                        if (data.success) {
                            alert('Reserva creada exitosamente.');
                            $('#selectTimeModal').modal('hide');
                            calendar.refetchEvents();

                            // Redirigir a la vista ConfirmarReserva con el idReserva
                            const reservaId = data.idReserva;  // Suponiendo que la respuesta contiene el ID de la reserva
                            window.location.href = `/Pagoes/Index?reservaId=${reservaId}`;
                            
                        } else {
                            alert('Error al crear la reserva.');
                        }
                    })
                    .catch(error => alert('Error de red: ' + error.message));
            } else {
                alert('Por favor, selecciona un horario.');
            }
        });
    });

    function cancelarReserva(id) {
        fetch(`/Reservas/Cancel/${id}`, { method: 'POST' })
            .then(response => {
                if (response.ok) {
                    alert('Reserva cancelada.');
                    location.reload();
                } else {
                    alert('Error al cancelar la reserva.');
                }
            })
            .catch(error => alert('Error de red: ' + error.message));
    }

    function eliminarReserva(id) {
        if (confirm('¿Estás seguro de eliminar esta reserva?')) {
            fetch(`/Reservas/DeleteReserva/${id}`, { method: 'DELETE' })
                .then(response => {
                    if (response.ok) {
                        alert('Reserva eliminada.');
                        location.reload();
                    } else {
                        alert('Error al eliminar la reserva.');
                    }
                })
                .catch(error => alert('Error de red: ' + error.message));
        }
    }

    document.addEventListener('hidden.bs.modal', function (event) {
        const modal = event.target;
        if (modal.id === 'reservationActionModal') {
            modal.querySelector('.modal-body').innerHTML = '';
            modal.remove();  // Elimina el modal del DOM
        }
    });
</script>